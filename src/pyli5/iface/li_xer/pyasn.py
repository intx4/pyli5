# Auto-generated by asn1ate v.0.6.1.dev0 from TS33128IdentityAssociation.asn
# (last modified on 2023-01-03 15:52:59.340291)
import base64
import time

import requests
# TS33128IdentityAssociation
from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful
from pyasn1.codec.ber import encoder, decoder

from pyli5.utils.time import get_time_utc
from pyli5.ief.ief_records import IEFRecord as iefRecord, IEFAssociationRecord as iefAssociationRecord, IEFDeassociationRecord as iefDeassociationRecord



class EUI64(univ.OctetString):
    pass


EUI64.subtypeSpec = constraint.ValueSizeConstraint(8, 8)


class FiveGGUTI(univ.OctetString):
    pass


FiveGGUTI.subtypeSpec = constraint.ValueSizeConstraint(10, 10)


class TAI(univ.OctetString):
    pass


TAI.subtypeSpec = constraint.ValueSizeConstraint(6, 6)


class FiveGSTAIList(univ.SequenceOf):
    pass


FiveGSTAIList.componentType = TAI()


class NCI(univ.BitString):
    pass




class PLMNID(univ.OctetString):
    pass


PLMNID.subtypeSpec = constraint.ValueSizeConstraint(3, 3)


class NCGI(univ.Sequence):
    pass


NCGI.componentType = namedtype.NamedTypes(
    namedtype.NamedType('pLMNID', PLMNID().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    namedtype.NamedType('nCI', NCI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))
)


class IMEI(char.NumericString):
    pass


IMEI.subtypeSpec = constraint.ValueSizeConstraint(14, 14)


class IMEISV(char.NumericString):
    pass


IMEISV.subtypeSpec = constraint.ValueSizeConstraint(16, 16)


class MACAddress(univ.OctetString):
    pass


MACAddress.subtypeSpec = constraint.ValueSizeConstraint(6, 6)


class PEI(univ.Choice):
    pass


PEI.componentType = namedtype.NamedTypes(
    namedtype.NamedType('iMEI', IMEI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    namedtype.NamedType('iMEISV', IMEISV().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    namedtype.NamedType('mACAddress', MACAddress().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),
    namedtype.NamedType('eUI64', EUI64().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4)))
)


class SUCI(univ.OctetString):
    pass


SUCI.subtypeSpec = constraint.ValueSizeConstraint(8, 3008)


class IMSI(char.NumericString):
    pass


IMSI.subtypeSpec = constraint.ValueSizeConstraint(6, 15)


class NAI(char.UTF8String):
    pass


class SUPI(univ.Choice):
    pass


SUPI.componentType = namedtype.NamedTypes(
    namedtype.NamedType('iMSI', IMSI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    namedtype.NamedType('nAI', NAI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))
)


class IEFAssociationRecord(univ.Sequence):
    pass


IEFAssociationRecord.componentType = namedtype.NamedTypes(
    namedtype.NamedType('sUPI', SUPI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),
    namedtype.NamedType('fiveGGUTI', FiveGGUTI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    namedtype.NamedType('timestamp', useful.GeneralizedTime().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),
    namedtype.NamedType('tAI', TAI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 4))),
    namedtype.NamedType('nCGI', NCGI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),
    namedtype.NamedType('nCGITime', useful.GeneralizedTime().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6))),
    namedtype.OptionalNamedType('sUCI', SUCI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 7))),
    namedtype.OptionalNamedType('pEI', PEI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8))),
    namedtype.OptionalNamedType('fiveGSTAIList', FiveGSTAIList().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 9)))
)


class IEFDeassociationRecord(univ.Sequence):
    pass


IEFDeassociationRecord.componentType = namedtype.NamedTypes(
    namedtype.NamedType('sUPI', SUPI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),
    namedtype.NamedType('fiveGGUTI', FiveGGUTI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    namedtype.NamedType('timestamp', useful.GeneralizedTime().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))),
    namedtype.NamedType('nCGI', NCGI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),
    namedtype.NamedType('nCGITime', useful.GeneralizedTime().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5))),
    namedtype.OptionalNamedType('sUCI', SUCI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6)))
)


class IEFKeepaliveMessage(univ.Sequence):
    pass


IEFKeepaliveMessage.componentType = namedtype.NamedTypes(
    namedtype.NamedType('sequenceNumber', univ.Integer().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
)


class IEFRecord(univ.Choice):
    pass


IEFRecord.componentType = namedtype.NamedTypes(
    namedtype.NamedType('associationRecord', IEFAssociationRecord().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),
    namedtype.NamedType('deassociationRecord', IEFDeassociationRecord().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),
    namedtype.NamedType('keepalive', IEFKeepaliveMessage().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),
    namedtype.NamedType('keepaliveResponse', IEFKeepaliveMessage().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4)))
)


class RELATIVE_OID(univ.ObjectIdentifier):
    pass

oid = RELATIVE_OID((0,4,1,20,2,16,3,2,4,1))


class IEFMessage(univ.Sequence):
    pass


IEFMessage.componentType = namedtype.NamedTypes(
    namedtype.NamedType('iEFRecordOID', oid),
    namedtype.NamedType('record', IEFRecord().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2)))
)

def encode(msg : iefRecord)->bytes:
    if msg.assoc is not None:
        return _encode_assoc(msg.assoc)
    elif msg.deassoc is not None:
        return _encode_deassoc(msg.deassoc)

def decode(msg: bytes)->iefRecord:
    """
    Deprecated, used in pyasn1 binding in Go
    """
    message = decoder.decode(msg, asn1Spec=IEFMessage())[0]
    record = message.getComponentByName("record")
    #print(record)
    if record is None:
        raise Exception("ASN1 Decoding Error for IEFRecord")
    decoded_record = iefRecord()
    decoded_record.assoc = None
    decoded_record.deassoc = None
    if record['deassociationRecord'].isValue:
        decoded_record.deassoc = iefDeassociationRecord(
            supi=record['deassociationRecord']['sUPI']['iMSI']._value,
            fivegguti=record['deassociationRecord']['fiveGGUTI']._value.decode(),
            ncgi={'pLMNID':record['deassociationRecord']['nCGI']['pLMNID']._value.decode(),'nCI':record['deassociationRecord']['nCGI']['nCI']._value},
            ncgi_time=record['deassociationRecord']['nCGITime']._value,
            timestmp=record['deassociationRecord']['timestamp']._value,
            suci=record['deassociationRecord']['sUCI']._value.decode(),
        )
        return decoded_record

    # need for God knows whatever reason, we need to reinstantiate record
    message = decoder.decode(msg, asn1Spec=IEFMessage())[0]
    record = message.getComponentByName("record")
    if record['associationRecord'].isValue:
        decoded_record.assoc = iefAssociationRecord(
            supi=record['associationRecord']['sUPI']['iMSI']._value,
            suci=record['associationRecord']['sUCI']._value.decode(),
            fivegguti=record['associationRecord']['fiveGGUTI']._value.decode(),
            ncgi={'pLMNID':record['associationRecord']['nCGI']['pLMNID']._value.decode(),'nCI':record['associationRecord']['nCGI']['nCI']._value},
            ncgi_time=record['associationRecord']['nCGITime']._value,
            tai=record['associationRecord']['tAI']._value.decode(),
            timestmp=record['associationRecord']['timestamp']._value,
            list_of_tai=[str(tai) for tai in record['associationRecord']['fiveGSTAIList']._componentValues.values()],
            pei=record['associationRecord']['pEI']['iMEISV']._value,
        )
        return decoded_record

def _encode_assoc(msg : iefAssociationRecord)->bytes:
    record = IEFRecord().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))
    associationRecord = IEFAssociationRecord().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))
    supi = SUPI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))
    supi['iMSI'] = msg.supi
    associationRecord['sUPI'] = supi
    associationRecord['fiveGGUTI'] = msg.fivegguti
    associationRecord['timestamp'] = useful.GeneralizedTime(msg.timestmp).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))
    associationRecord['tAI'] = msg.tai
    ncgi = NCGI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))
    ncgi['pLMNID'] = msg.ncgi['pLMNID']
    ncgi['nCI'] = msg.ncgi['nCI']
    associationRecord['nCGI'] = ncgi
    associationRecord['nCGITime'] = useful.GeneralizedTime(msg.ncgi_time).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 6))
    associationRecord['sUCI'] = msg.suci
    pei = PEI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8))
    pei["iMEISV"] = msg.pei
    associationRecord['pEI'] = pei
    tai_list = FiveGSTAIList().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 9))
    tai_list.extend(msg.list_of_tai)
    associationRecord['fiveGSTAIList'] = tai_list

    record['associationRecord'] = associationRecord


    message = IEFMessage()
    message['record'] = record
    #iEFRecordOID_octet = encoder.encode(iEFRecordOID)
    return encoder.encode(message)

def _encode_deassoc(msg: iefDeassociationRecord)->bytes:
    """

    """
    record = IEFRecord().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))
    deassociationRecord = IEFDeassociationRecord().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))
    supi = SUPI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))
    supi['iMSI'] = msg.supi
    deassociationRecord['sUPI'] = supi
    deassociationRecord['fiveGGUTI'] = msg.fivegguti
    deassociationRecord['timestamp'] = useful.GeneralizedTime(msg.timestmp).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3))

    ncgi = NCGI().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))
    ncgi['pLMNID'] = msg.ncgi['pLMNID']
    ncgi['nCI'] = msg.ncgi['nCI']
    deassociationRecord['nCGI'] = ncgi
    deassociationRecord['nCGITime'] = useful.GeneralizedTime(msg.ncgi_time).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 5))
    deassociationRecord['sUCI'] = msg.suci
    record['deassociationRecord'] = deassociationRecord

    message = IEFMessage()
    message['record'] = record
    # iEFRecordOID_octet = encoder.encode(iEFRecordOID)
    return encoder.encode(message)


